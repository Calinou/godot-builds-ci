# This build script is licensed under CC0 1.0 Universal:
# https://creativecommons.org/publicdomain/zero/1.0/

image: Visual Studio 2017
shallow_clone: true

environment:
  # Compile with link-time optimization enabled for faster binaries
  SCONS_FLAGS: debug_symbols=no progress=no
  # Path to the Inno Setup compiler
  INNOSETUP: "C:\\Program Files (x86)\\Inno Setup 5\\ISCC.exe"
  # Encrypted passphrase used for decrypting the SSH private key
  # (which is used for deployment using SCP)
  SSH_KEYFILE_PASSPHRASE: "PF+BTT4Pj/J55cG2ySQKadCN7zHQSxFyFDmjvA9Brig="

  matrix:
    # Editor
    - TOOLS: "yes"
      TARGET: "release_debug"

    # Debug export templates
    - TOOLS: "no"
      TARGET: "release_debug"

    # Release export templates
    - TOOLS: "no"
      TARGET: "release"

install:
  # Install SCons, the `patch` utility and OpenSSH
  # `--egg` is required for use with AppVeyor
  - pip install --egg scons
  - pip install patch
  - ps: iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
  - ps: scoop install openssh
  # Decrypt the SSH private key
  - nuget install secure-file -ExcludeVersion
  - mkdir "%USERPROFILE%\scoop\apps\openssh\current\.ssh"
  - secure-file\tools\secure-file -decrypt "resources\id_rsa_appveyor.enc" -secret %SSH_KEYFILE_PASSPHRASE% -out "%USERPROFILE%\scoop\apps\openssh\current\.ssh\id_rsa"
  # Copy the `known_hosts` file over so that it's used by the SCP client
  - copy "resources\known_hosts" "%USERPROFILE%\scoop\apps\openssh\current\.ssh\known_hosts"
  # Clone Godot Git repository and set build variables
  - git clone --depth=1 https://github.com/godotengine/godot.git
  - cd godot\
  - git rev-parse --short=9 HEAD > BUILD_COMMIT
  - set /p BUILD_COMMIT=<BUILD_COMMIT
  - set BUILD_DATE=2017-01-01
  - set BUILD_VERSION=%BUILD_DATE%.%BUILD_COMMIT%
  - patch methods.py ..\resources\always_tty.patch

build_script:
  # LTO is enabled only for 64-bit targets, as 32-bit doesn't offer enough available RAM for linking
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=x64
  - scons platform=windows tools=%TOOLS% target=%TARGET% %SCONS_FLAGS% use_lto=yes
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=x86
  - scons platform=windows tools=%TOOLS% target=%TARGET% %SCONS_FLAGS%

after_build:
  - mkdir "%BUILD_VERSION%\editor" "%BUILD_VERSION%\templates"
  # Create editor ZIP archives
  - if %TOOLS%==yes 7z a "%BUILD_VERSION%\editor\Godot-Windows-x86_64-%BUILD_VERSION%.zip" "bin\godot.windows.opt.tools.64.exe"
  - if %TOOLS%==yes 7z a "%BUILD_VERSION%\editor\Godot-Windows-x86-%BUILD_VERSION%.zip" "bin\godot.windows.opt.tools.32.exe"
  # Generate Windows installers
  - if %TOOLS%==yes copy "%APPVEYOR_BUILD_FOLDER%\resources\godot.iss" "godot.iss"
  - if %TOOLS%==yes move "bin\godot.windows.opt.tools.64.exe" "godot.exe"
  - if %TOOLS%==yes "%INNOSETUP%" "godot.iss"
  - if %TOOLS%==yes move "Output\Godot-Windows-Installer-x86_64.exe" "%BUILD_VERSION%\editor\Godot-Windows-Installer-x86_64-%BUILD_VERSION%.exe"
  - if %TOOLS%==yes del "godot.exe"
  - if %TOOLS%==yes move "bin\godot.windows.opt.tools.32.exe" "godot.exe"
  - if %TOOLS%==yes "%INNOSETUP%" "godot.iss" /DApp32Bit
  - if %TOOLS%==yes move Output\Godot-Windows-Installer-x86.exe" "%BUILD_VERSION%\editor\Godot-Windows-Installer-x86-%BUILD_VERSION%.exe"
  # Move export templates to the build artifacts directory
  - if %TOOLS%==no if %TARGET%==release_debug copy bin\godot.windows.opt.debug.64.exe "%BUILD_VERSION%\templates\windows_64_debug.exe"
  - if %TOOLS%==no if %TARGET%==release_debug copy bin\godot.windows.opt.debug.32.exe "%BUILD_VERSION%\templates\windows_32_debug.exe"
  - if %TOOLS%==no if %TARGET%==release copy bin\godot.windows.opt.64.exe "%BUILD_VERSION%\templates\windows_64_release.exe"
  - if %TOOLS%==no if %TARGET%==release copy bin\godot.windows.opt.32.exe "%BUILD_VERSION%\templates\windows_32_release.exe"
  # Deploy to server using SCP
  - scp -r "%BUILD_VERSION%" hugo@hugo.pro:/var/www/godot.hugo.pro/builds
