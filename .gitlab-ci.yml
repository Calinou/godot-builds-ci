# The GitHub repository is mirrored to GitLab.com, where continuous builds
# are performed and can be downloaded.
#
# https://gitlab.com/Calinou/godot-builds-ci
#
# This build script is licensed under CC0 1.0 Universal:
# https://creativecommons.org/publicdomain/zero/1.0/

# Use only one stage for simplicity's sake
stages:
  - build

variables:
  # The number of CPU threads to use for compiling Godot
  BUILD_THREADS: 3
  # SCons build flags to use for all platforms
  SCONS_FLAGS: debug_symbols=no progress=no -j$BUILD_THREADS

# Install dependencies and prepare stuff before building
before_script:
  - apt-get update -y
  - apt-get install -y git cmake wget unzip build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev libxi-dev yasm
  - git clone --depth=1 https://github.com/godotengine/godot.git
  - cd godot/
  - patch methods.py ../resources/always_tty.patch
  - export BUILD_COMMIT="$(git rev-parse --short=9 HEAD)"
  - export BUILD_DATE="$(git log -1 --format=%cd --date=short)"
  - export BUILD_VERSION="$BUILD_DATE.$BUILD_COMMIT"
  - mkdir -p "$BUILD_VERSION/editor" "$BUILD_VERSION/templates"

# Deploy to server using SCP
# `$SSH_PRIVATE_KEY` is a secret variable defined in the GitLab CI settings
after_script:
  - cd godot/
  - export BUILD_COMMIT="$(git rev-parse --short=9 HEAD)"
  - export BUILD_DATE="$(git log -1 --format=%cd --date=short)"
  - export BUILD_VERSION="$BUILD_DATE.$BUILD_COMMIT"
  - mkdir -p "$HOME/.ssh"
  - echo "$SSH_PRIVATE_KEY" > "$HOME/.ssh/id_rsa"
  - chmod 600 "$HOME/.ssh/id_rsa"
  - cp "../resources/known_hosts" "$HOME/.ssh/"
  - scp -r "$BUILD_VERSION/" hugo@hugo.pro:/var/www/godot.hugo.pro/builds

# Linux editor
# Built on Ubuntu 14.04 so that binaries run on old distributions as well
# TODO: Build 32-bit Linux editor

build:linux_editor:
  stage: build
  image: ubuntu:trusty
  script:
    - scons platform=x11 tools=yes target=release_debug $SCONS_FLAGS
    - strip bin/godot.x11.opt.tools.64
    - mkdir -p appdir/usr/bin/ appdir/usr/share/icons
    - cp bin/godot.x11.opt.tools.64 appdir/usr/bin/godot
    - cp misc/dist/appimage/godot.desktop appdir/godot.desktop
    - cp icon.svg appdir/usr/share/icons/godot.svg
    - wget -q "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
    - chmod +x linuxdeployqt-continuous-x86_64.AppImage
    - ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract
    - ./squashfs-root/AppRun appdir/godot.desktop -appimage
    - mv Godot_Engine-x86_64.AppImage "$BUILD_VERSION/editor/Godot-Linux-x86_64-$BUILD_VERSION.AppImage"

# Linux export templates
# Built on Ubuntu 14.04 so that binaries run on old distributions as well
# TODO: Build 32-bit Linux export templates. For now, the 64-bit templates are copied to 32-bit templates,
# to prevent errors from appearing in the export dialog.

build:linux_templates:
  stage: build
  image: ubuntu:trusty
  script:
    - scons platform=x11 tools=no target=release_debug $SCONS_FLAGS
    - scons platform=x11 tools=no target=release $SCONS_FLAGS
    - strip bin/godot.*.64
    - cp bin/godot.x11.opt.debug.64 "$BUILD_VERSION/templates/linux_x11_64_debug"
    - mv bin/godot.x11.opt.debug.64 "$BUILD_VERSION/templates/linux_x11_32_debug"
    - cp bin/godot.x11.opt.64 "$BUILD_VERSION/templates/linux_x11_64_release"
    - mv bin/godot.x11.opt.64 "$BUILD_VERSION/templates/linux_x11_32_release"

# HTML5 (WebAssembly)

build:html5:
  stage: build
  image: ubuntu:artful
  script:
    - wget -q "https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz"
    - tar xf emsdk-portable.tar.gz
    - cd emsdk-portable/; ./emsdk update; ./emsdk install latest; ./emsdk activate latest
    - source ./emsdk_env.sh
    - export EMSCRIPTEN_ROOT=$(em-config EMSCRIPTEN_ROOT)
    - cd ../
    - scons platform=javascript tools=no target=release_debug $SCONS_FLAGS
    - scons platform=javascript tools=no target=release $SCONS_FLAGS
    - mv "bin/godot.javascript.opt.debug.zip" "$BUILD_VERSION/templates/webassembly_debug.zip"
    - mv "bin/godot.javascript.opt.zip" "$BUILD_VERSION/templates/webassembly_release.zip"

# Android

build:android:
  stage: build
  image: ubuntu:artful
  script:
    - apt-get install -y openjdk-8-jdk
    - mkdir -p "$CI_PROJECT_DIR/android"
    - cd "$CI_PROJECT_DIR/android"
    - wget -q "https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip"
    - unzip -q "sdk-tools-linux-3859397.zip"
    - rm "sdk-tools-linux-3859397.zip"
    - mkdir -p "licenses/"
    - cp "$CI_PROJECT_DIR/resources/android-sdk-license" "licenses/"
    - export ANDROID_HOME="$CI_PROJECT_DIR/android"
    - wget -q "https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip"
    - unzip -q "android-ndk-r16b-linux-x86_64.zip"
    - rm "android-ndk-r16b-linux-x86_64.zip"
    - export ANDROID_NDK_ROOT="$ANDROID_HOME/android-ndk-r16b"
    - cd "$CI_PROJECT_DIR/godot"
    - scons platform=android tools=no target=release_debug $SCONS_FLAGS
    - scons platform=android tools=no target=release $SCONS_FLAGS
    - cd "platform/android/java"
    - ./gradlew build
    - cd "$CI_PROJECT_DIR/godot"
    - mv "bin/android_debug.apk" "$BUILD_VERSION/templates/"
    - mv "bin/android_release.apk" "$BUILD_VERSION/templates/"
